services:
  portainer:
    image: docker.io/portainer/portainer-ee:${PERSONAL_PORTAINER_VERSION:-lts}
    hostname: portainer-ee
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/portainer:/data
    networks:
      - web
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.portainer.tls: "true"
        traefik.http.routers.portainer.middlewares: "authelia@swarm"
        traefik.http.routers.portainer.entrypoints: "websecure"
        traefik.http.routers.portainer.rule: Host(`management.${PERSONAL_DOMAINE_NAME}`)
        traefik.http.routers.portainer.service: "portainer"
        traefik.http.services.portainer.loadbalancer.server.port: "9000"

  portainer_agent:
    image: docker.io/portainer/agent:${PERSONAL_PORTAINER_VERSION:-lts}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - web
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: true
        diun.watch_repos: true

networks:
  web:
    external: true

