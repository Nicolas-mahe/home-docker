services:
  cloudflare-ddns:
    restart: always
    image: oznu/cloudflare-ddns
    container_name: cloudflare-ddns
    hostname: cloudflare-ddns
    labels:
      diun.enable: true
      diun.watch_repos: true
    environment:
      API_KEY: ${DNS_API_KEY}
      ZONE: ${PERSONAL_DOMAINE_NAME}
      PROXIED: true
      TZ: Europe/Paris
      DELETE_ON_STOP: true
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
    networks:
      - webexpose

  ################# Traefik #################

  whoami:
    restart: unless-stopped
    image: docker.io/traefik/whoami
    container_name: whoami
    hostname: whoami
    labels:
      diun.enable: true
      diun.watch_repos: true
      traefik.enable: true
      traefik.http.routers.whoami.tls: true
      traefik.http.routers.whoami.tls.certresolver: production
      traefik.http.routers.whoami.middlewares: authentik@docker
      traefik.http.routers.whoami.entrypoints: web, websecure
      traefik.http.routers.whoami.rule: Host(`whoami.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.whoami.service: whoami
      traefik.http.services.whoami.loadBalancer.server.port: 80
    environment:
      PUID: 1000
      PGID: 100
      TZ: Europe/Paris
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
    expose:
      - 80
    networks:
      - webinternal
    depends_on: 
      traefik:
        condition: service_started

  traefik:
    restart: unless-stopped
    image: docker.io/library/traefik:${TRAEFIK_TAG:-v3.2.1}
    container_name: traefik
    hostname: traefik
    labels:
      diun.enable: true
      diun.watch_repos: true
      traefik.enable: true
      traefik.http.routers.dashboard.tls: true
      traefik.http.routers.dashboard.tls.certresolver: production
      traefik.http.routers.dashboard.middlewares: authentik@docker
      traefik.http.routers.dashboard.entrypoints: web, websecure
      traefik.http.routers.dashboard.rule: Host(`traefik.${PERSONAL_DOMAINE_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.dashboard.service: api@internal
    environment:
      PUID: 1000
      PGID: 100
      TZ: Europe/Paris
      CF_DNS_API_TOKEN: ${PERSONAL_CF_DNS_API}
    volumes:
      - /run/docker.sock:/run/docker.sock:ro
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/conf/:/etc/traefik/conf/
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/certs/:/etc/traefik/certs/
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/logs/:/var/log/traefik
    ports:
      - 80:80
      - 443:443
      # - 25565:25565/udp # test for minecraft in udp
    expose:
      - 8080
    depends_on:
      crowdsec:
        condition: service_started
      redis-bouncer:
        condition: service_healthy
      server:
        condition: service_healthy
      worker:
        condition: service_healthy
    networks:
      - crowdsec
      - prometheus
      - webexpose
      - webinternal
    command:
      - --global.sendAnonymousUsage
      - --log.level=INFO
      - --log.nocolor=true
      - --accesslog=true
      - --api.dashboard=true
      - --api.insecure=true
      - --metrics.addinternals
      - --metrics.prometheus=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.middlewares=crowdsec@docker
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.middlewares=crowdsec@docker
      # - --entrypoints.minecraft.address=:25565/udp # test for minecraft in udp
      - --certificatesresolvers.staging.acme.email=${PERSONAL_CF_MAIL}
      - --certificatesresolvers.staging.acme.storage=/etc/traefik/certs/acme.json
      - --certificatesresolvers.staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.staging.acme.httpChallenge.entryPoint=web
      - --certificatesresolvers.production.acme.email=${PERSONAL_CF_MAIL}
      - --certificatesresolvers.production.acme.storage=/etc/traefik/certs/acme.json
      - --certificatesresolvers.production.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.production.acme.httpChallenge.entryPoint=web
      - --serversTransport.insecureSkipVerify=true  # need to put a validate cert everywhere for delete it
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=webinternal
      - --providers.file.directory=/etc/traefik/conf
      - --providers.file.watch=true
      - --experimental.plugins.bouncer.moduleName=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.bouncer.version=${CROWDSEC_PLUGIN_VERSION:?bouncer version required}

  ################# Crowdsec #################
  redis-bouncer:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    container_name: redis-bouncer
    hostname: redis-bouncer
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
#    labels:
#       diun.enable: true
#       diun.watch_repos: true
    environment:
      PUID: 1000
      GUID: 100
      TZ: Europe/Paris
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - redis-bouncer:/data
    networks:
      - crowdsec

  crowdsec:
    restart: unless-stopped
    image: ghcr.io/crowdsecurity/crowdsec
    container_name: crowdsec
    hostname: crowdsec
    security_opt:
      - no-new-privileges=true
    labels:
      diun.enable: true
      diun.watch_repos: true
      traefik.enable: true
      traefik.docker.network: crowdsec
      traefik.http.middlewares.crowdsec.plugin.bouncer.enabled: true
      traefik.http.middlewares.crowdsec.plugin.bouncer.logLevel: INFO
      traefik.http.middlewares.crowdsec.plugin.bouncer.defaultDecisionSeconds: 86400
      traefik.http.middlewares.crowdsec.plugin.bouncer.httpTimeoutSeconds: 10
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecMode: live
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiKey: ${CROWDSEC_API_TRAEFIK?:crowdsec api required}
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiHost: crowdsec:8080
      traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiScheme: http
      traefik.http.middlewares.crowdsec.plugin.bouncer.clientTrustedIPs: ${PERSONAL_IP_RANGES}
      traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersTrustedIPs: ${CF_PROXY_IP}
      traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersCustomName: CF-Connecting-IP,X-Forwarded-For,X-Real-Ip
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaProvider: recaptcha
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSiteKey: ${CROWDSEC_CAPTCHA_SITE_KEY?:captcha key required}
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSecretKey: ${CROWDSEC_CAPTCHA_SECRET_KEY?:captcha secret required}
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaGracePeriodSeconds: 1800
      traefik.http.middlewares.crowdsec.plugin.bouncer.captchaHTMLFilePath: /etc/traefik/conf/captcha.html
      traefik.http.middlewares.crowdsec.plugin.bouncer.banHTMLFilePath: /etc/traefik/conf/ban.html
      traefik.http.middlewares.crowdsec.plugin.bouncer.RedisCacheHost: redis-bouncer:6379
      traefik.http.middlewares.crowdsec.plugin.bouncer.RedisCacheEnabled: true
    environment:
      PUID: 1000
      PGID: 100
      TZ: Europe/Paris
      CUSTOM_HOSTNAME: crowdsec-docker
      BOUNCER_KEY_TRAEFIK: ${CROWDSEC_API_TRAEFIK:?crowdsec api required}
      COLLECTIONS: |
        crowdsecurity/appsec-generic-rules
        crowdsecurity/appsec-virtual-patching
        crowdsecurity/whitelist-good-actors
        crowdsecurity/linux
        crowdsecurity/linux-lpe
        firix/authentik
        LePresidente/grafana
        LePresidente/adguardhome
        crowdsecurity/nginx
        crowdsecurity/nextcloud
        crowdsecurity/traefik
        Dominic-Wagner/vaultwarden
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro #Can read logs from socket!
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/crowdsec/config:/etc/crowdsec #Config Crowdsec
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/crowdsec/data:/var/lib/crowdsec/data/ #Config Crowdsec
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/traefik/logs/:/var/log/traefik:ro #Logs Traefik
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/nextcloud/config/log/:/var/log/nextcloud/:ro #Logs nginx + php Nextcloud
      - /var/log/nginx/:/var/log/openmediavault/:ro #Logs nginx OpenMediaVault
    expose:
      - 6060 #monitoring
      - 8080
    networks:
      - crowdsec
      - prometheus
      - webexpose

  ################# Authentik #################
  server:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-2024.8.2}
    restart: unless-stopped
    container_name: authentik-server
    hostname: authentik-server
    command: server
    labels:
      diun.enable: true
      diun.watch_repos: true
      traefik.enable: true
      traefik.http.routers.authentik-server.tls: true
      traefik.http.routers.authentik-server.tls.certresolver: production
      traefik.http.routers.authentik-server.entrypoints: web, websecure
      traefik.http.routers.authentik-server.rule: Host(`auth.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.authentik-server.service: authentik-server  
      traefik.http.services.authentik-server.loadBalancer.server.port: 9000
      # middleware authentik
      traefik.port: 9000
      traefik.http.middlewares.authentik.forwardauth.address: http://authentik-server:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
    environment:
      PUID: 1000
      GUID: 1000
      TZ: Europe/Paris
      AUTHENTIK_COOKIE_DOMAIN: ${PERSONAL_DOMAINE_NAME}
      AUTHENTIK_ERROR_REPORTING__ENABLED: false
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?authentik secret key required}
      AUTHENTIK_REDIS__HOST: redis-authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_AUTHENTIK_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_AUTHENTIK_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_AUTHENTIK_PASSWORD}
      AUTHENTIK_EMAIL__HOST: ${PERSONAL_SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${PERSONAL_SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${PERSONAL_EMAIL_SMTP}
      AUTHENTIK_EMAIL__PASSWORD: ${PERSONAL_PWD_SMTP}
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: true
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: ${PERSONAL_EMAIL_SMTP}
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/authentik/media:/media
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/authentik/custom-templates:/templates
    expose:
      - 9000
      - 9443
    depends_on:
      postgresql:
        condition: service_healthy
      redis-authentik:
        condition: service_healthy
    networks:
      - webinternal
      - authentik

  worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-2024.8.2}
    restart: unless-stopped
    command: worker
    container_name: authentik-worker
    hostname: authentik-worker
    environment:
      PUID: 1000
      GUID: 1000
      TZ: Europe/Paris
      AUTHENTIK_COOKIE_DOMAIN: ${PERSONAL_DOMAINE_NAME}
      AUTHENTIK_ERROR_REPORTING__ENABLED: false
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?authentik secret key required}
      AUTHENTIK_REDIS__HOST: redis-authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_AUTHENTIK_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_AUTHENTIK_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_AUTHENTIK_PASSWORD}
      AUTHENTIK_EMAIL__HOST: smtp-mail.outlook.com
      AUTHENTIK_EMAIL__PORT: 587
      AUTHENTIK_EMAIL__USERNAME: ${PERSONAL_EMAIL_SMTP}
      AUTHENTIK_EMAIL__PASSWORD: ${PERSONAL_PWD_SMTP}
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: true
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: ${PERSONAL_EMAIL_SMTP}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/authentik/media:/media
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/authentik/certs:/certs
      - /${DOCKER_DATA_DIRECTORY}/docker/docker-data/authentik/custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis-authentik:
        condition: service_healthy
    networks:
      - authentik

  ################# Authentik_ BDD #################
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    container_name: authentik-postgresql
    hostname: authentik-postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_AUTHENTIK_DB} -U $${POSTGRES_AUTHENTIK_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    user: root
    labels:
      diun.enable: true
      diun.watch_repos: true
    environment:
      TZ: Europe/Paris
      POSTGRES_PASSWORD: ${POSTGRES_AUTHENTIK_PASSWORD:?database password required}
      POSTGRES_USER: ${POSTGRES_AUTHENTIK_USER:?database user required}
      POSTGRES_DB: ${POSTGRES_AUTHENTIK_DB:?database name required}
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - database:/var/lib/postgresql/data
    networks:
      - authentik

  redis-authentik:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    container_name: redis-authentik
    hostname: redis-authentik
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    labels:
      diun.enable: true
      diun.watch_repos: true
    environment:
      PUID: 1000
      GUID: 1000      
      TZ: Europe/Paris
    volumes:
      - /${DOCKER_DATA_DIRECTORY}/repos/home-docker/timezone:/etc/timezone:ro
      - redis-auth:/data
    networks:
      - authentik

volumes:  
  database:
    driver: local
    name: traefik-authentik_database
  redis-auth:
    driver: local
    name: traefik-authentik_redis-auth
  redis-bouncer:
    driver: local
    name: traefik-authentik_redis-bouncer

networks:
  authentik:
    name: authentik
  crowdsec:
    name: crowdsec
  prometheus:
    name: prometheus
  webexpose:
    name: webexpose
  webinternal:
    name: webinternal