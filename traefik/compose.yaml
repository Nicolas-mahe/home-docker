# docker network create --driver=overlay web
# echo "vm.overcommit_memory=1" >> /etc/sysctl.conf && /sbin/sysctl -p /etc/sysctl.conf

services:
  ################# DNS setting #################
  ## Without Public IP
  cloudflare-tunnel:
    image: docker.io/cloudflare/cloudflared:latest
    deploy:
      restart_policy:
        condition: on-failure
    labels:
      diun.enable: "true"
      diun.watch_repos: "true"
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    networks:
      - web
    command: tunnel --no-autoupdate run

  ################# Traefik #################

  whoami:
    image: docker.io/traefik/whoami:latest
    hostname: '{{.Node.Hostname}}'
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.whoami.tls: "true"
        traefik.http.routers.whoami.middlewares: "authelia@swarm"
        traefik.http.routers.whoami.entrypoints: "websecure"
        traefik.http.routers.whoami.rule: Host(`whoami.${PERSONAL_DOMAINE_NAME}`)
        traefik.http.routers.whoami.service: "whoami"
        traefik.http.services.whoami.loadbalancer.server.port: "80"
    environment:
      TZ: Europe/Paris
    networks:
      - web

  traefik:
    image: docker.io/library/traefik:${TRAEFIK_TAG:-v3.2.1}
    hostname: '{{.Node.Hostname}}'
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.dashboard.tls: "true"
        traefik.http.routers.dashboard.middlewares: "authelia@swarm"
        traefik.http.routers.dashboard.entrypoints: "websecure"
        traefik.http.routers.dashboard.rule: Host(`traefik.${PERSONAL_DOMAINE_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        traefik.http.routers.dashboard.service: "api@internal"
        traefik.http.services.error-pages.loadbalancer.server.port: 8080
    environment:
      PUID: 1000
      PGID: 100
      TZ: Europe/Paris
      CF_DNS_API_TOKEN: ${PERSONAL_CF_TRAEFIK_API}
      CF_API_EMAIL: ${PERSONAL_CF_MAIL}
    volumes:
      - type: bind
        source: /run/docker.sock
        target: /run/docker.sock
        read_only: true
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/conf/
        target: /etc/traefik/conf/
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/certs/
        target: /etc/traefik/certs/
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/logs/
        target: /var/log/traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 853
        published: 853
        protocol: tcp
        mode: host
      - target: 25565
        published: 25565
        protocol: udp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    networks:
      - web
    command:
      - --global.sendAnonymousUsage=false
      - --global.checkNewVersion=false
      - --log.level=INFO
      - --log.nocolor=false
      # - --log.filePath=/var/log/traefik/traefik.log
      - --accesslog=true
      - --accesslog.addinternals
      - --accesslog.filepath=/var/log/traefik/access.log
      - --api.dashboard=true
      - --api.insecure=true
      - --metrics.addinternals
      - --metrics.prometheus=true
      - --certificatesresolvers.letsencrypt-cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt-cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt-cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.letsencrypt-cloudflare.acme.dnschallenge.propagation.delaybeforechecks=0
      - --certificatesresolvers.letsencrypt-cloudflare.acme.email=${PERSONAL_CF_MAIL}
      - --certificatesresolvers.letsencrypt-cloudflare.acme.storage=/etc/traefik/certs/acme-wildcard.json
      - --entrypoints.websecure.http.tls.domains[0].main=${PERSONAL_DOMAINE_NAME}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${PERSONAL_DOMAINE_NAME}
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.middlewares=crowdsec@swarm,error-pages@swarm
      - --entrypoints.websecure.address=:443
      - --entryPoints.websecure.forwardedHeaders.insecure=true #false
      - --entryPoints.websecure.proxyProtocol.insecure=true #false
      # - --entryPoints.websecure.forwardedHeaders.trustedIPs=172.18.0.0/16,172.22.0.0/16
      # - --entryPoints.websecure.proxyProtocol.trustedIPs=172.18.0.0/16,172.22.0.0/16
      - --entrypoints.websecure.http.middlewares=crowdsec@swarm,error-pages@swarm
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt-cloudflare
      - --entrypoints.minecraft.address=:25565/udp # test for minecraft in udp
      - --entrypoints.dot.address=:853
      - --serversTransport.insecureSkipVerify=true
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedByDefault=false
      - --providers.swarm.network=web
      - --providers.file.directory=/etc/traefik/conf
      - --providers.file.watch=true
      - --experimental.plugins.bouncer.moduleName=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.bouncer.version=${CROWDSEC_PLUGIN_VERSION:?bouncer version required}

# Certificates management

# Entrypoint management

# Provider definition

# Crowdsec definition

  error-pages:
    image: ghcr.io/patbec/traefik-error-pages:latest
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.error-pages.tls: "true"
        traefik.http.routers.error-pages.entrypoints: "websecure"
        traefik.http.routers.error-pages.rule: HostRegexp(`{host:.+}`)
        traefik.http.routers.error-pages.priority: "1"
        traefik.http.routers.error-pages.service: "error-pages"
        traefik.http.services.error-pages.loadbalancer.server.port: "8090"
        traefik.http.middlewares.error-pages.errors.status: "400-599"
        traefik.http.middlewares.error-pages.errors.service: "error-pages"
        traefik.http.middlewares.error-pages.errors.query: "/{status}.html"
    environment:
      TZ: Europe/Paris
      PROXY_NAME: traefik
      PROXY_LOCATION: ${PROXY_LOCATION:-France}
      PROXY_SUPPORT_MESSAGE: ${PROXY_SUPPORT_MESSAGE:-Retry in few minutes or send mail at:}
      PROXY_SUPPORT_MAIL: ${PROXY_SUPPORT_MAIL:-contact@${PERSONAL_DOMAINE_NAME}}
    networks:
      - web

  nginx-utils:
    image: docker.io/nginx:alpine
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.web-utils.tls: "true"
        traefik.http.routers.web-utils.middlewares: "authelia@swarm"
        traefik.http.routers.web-utils.entrypoints: "websecure"
        traefik.http.routers.web-utils.rule: Host(`utils.${PERSONAL_DOMAINE_NAME}`)
        traefik.http.routers.web-utils.service: "web-utils"
        traefik.http.services.web-utils.loadbalancer.server.port: "80"
    volumes:
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/web-utils
        target: /usr/share/nginx/html
        read_only: true
    environment:
      TZ: Europe/Paris
      NGINX_HOST: utils.${PERSONAL_DOMAINE_NAME}
    networks:
      - web

  ################# Crowdsec #################
  redis-bouncer:
    image: docker.io/library/redis:alpine
    hostname: redis-bouncer
    deploy:
      restart_policy:
        condition: on-failure
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    #   start_period: 20s
    #   interval: 30s
    #   retries: 5
    #   timeout: 3s
    environment:
      TZ: Europe/Paris
    volumes:
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/crowdsec/redis-bouncer
        target: /data
    networks:
      - web
    command: --save 60 1 --loglevel warning --stop-writes-on-bgsave-error no

  crowdsec:
    image: ghcr.io/crowdsecurity/crowdsec:latest
    hostname: crowdsec
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        # traefik.swarm.network: "crowdsec"
        traefik.http.services.crowdsec.loadbalancer.server.port: 8080 # required by swarm but not used.
        traefik.http.middlewares.crowdsec.plugin.bouncer.enabled: "true"
        traefik.http.middlewares.crowdsec.plugin.bouncer.logLevel: "INFO"
        traefik.http.middlewares.crowdsec.plugin.bouncer.defaultDecisionSeconds: 86400
        traefik.http.middlewares.crowdsec.plugin.bouncer.httpTimeoutSeconds: 10
        traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecMode: "live"
        traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiKey: ${CROWDSEC_API_TRAEFIK?:crowdsec api required}
        traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiHost: "crowdsec:8080"
        traefik.http.middlewares.crowdsec.plugin.bouncer.crowdsecLapiScheme: "http"
        traefik.http.middlewares.crowdsec.plugin.bouncer.clientTrustedIPs: ${PERSONAL_IP_RANGES}
        traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersTrustedIPs: ${CF_PROXY_IP}
        traefik.http.middlewares.crowdsec.plugin.bouncer.forwardedHeadersCustomName: CF-Connecting-IP,X-Forwarded-For,X-Real-Ip
        traefik.http.middlewares.crowdsec.plugin.bouncer.captchaProvider: "recaptcha"
        traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSiteKey: ${CROWDSEC_CAPTCHA_SITE_KEY?:captcha key required}
        traefik.http.middlewares.crowdsec.plugin.bouncer.captchaSecretKey: ${CROWDSEC_CAPTCHA_SECRET_KEY?:captcha secret required}
        traefik.http.middlewares.crowdsec.plugin.bouncer.captchaGracePeriodSeconds: 1800
        traefik.http.middlewares.crowdsec.plugin.bouncer.captchaHTMLFilePath: /etc/traefik/conf/captcha.html
        traefik.http.middlewares.crowdsec.plugin.bouncer.banHTMLFilePath: /etc/traefik/conf/ban.html
        traefik.http.middlewares.crowdsec.plugin.bouncer.RedisCacheHost: "redis-bouncer:6379"
        traefik.http.middlewares.crowdsec.plugin.bouncer.RedisCacheEnabled: "true"
    environment:
      TZ: Europe/Paris
      CUSTOM_HOSTNAME: crowdsec
      BOUNCER_KEY_TRAEFIK: ${CROWDSEC_API_TRAEFIK:?crowdsec api required}
      COLLECTIONS: |
        crowdsecurity/appsec-generic-rules
        crowdsecurity/appsec-virtual-patching
        crowdsecurity/whitelist-good-actors
        crowdsecurity/linux
        crowdsecurity/linux-lpe
        LePresidente/authelia
        LePresidente/adguardhome
        LePresidente/grafana
        crowdsecurity/nginx
        crowdsecurity/nextcloud
        crowdsecurity/traefik
        Dominic-Wagner/vaultwarden
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/crowdsec/config
        target: /etc/crowdsec
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/crowdsec/data
        target: /var/lib/crowdsec/data/
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/logs/
        target: /var/logs/traefik
        read_only: true
    networks:
      - web

  ################# Authelia #################
  authelia:
    image: ghcr.io/authelia/authelia:${AUTHELIA_TAG:-4.39.1}
    hostname: authelia
    deploy:
      restart_policy:
        condition: on-failure
      labels:
        diun.enable: "true"
        diun.watch_repos: "true"
        traefik.enable: "true"
        traefik.http.routers.authelia.tls: "true"
        traefik.http.routers.authelia.entrypoints: "websecure"
        traefik.http.routers.authelia.rule: Host(`auth.${PERSONAL_DOMAINE_NAME}`)
        traefik.http.routers.authelia.service: "authelia"
        traefik.http.services.authelia.loadbalancer.server.port: "9091"
        traefik.http.middlewares.authelia.forwardAuth.address: 'http://authelia:9091/api/authz/forward-auth'
        traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: "true"
        traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'
    environment:
      TZ: Europe/Paris
      AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET: 60z3SvMJ0FGiBENjb5M7D6jJltinzybuVWOceMcakcIBAoWWmsZI6RTYxoHfnwDTtXKQyj2epM0pgzey9elZufnvq67SQEfBYgWowV1cwHTT7s8AorquRIwxPrUo2pv4
      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET: rtxGs9mP6KuUGAbTk4fUDCevep3stKofonfAHvTL38iDYWnWjKreqYAjAbk3iAue5Ci74Ua2dpy7mfd5d5ag2rUJZx3qvfkykS9x4iC8TpMAjpR2etfCMXcpeYAth6ConME6Rt2nC62KzaD8i662E4b3QEQPNdSikRpk7CntEykCYvke49aTDUB8w37G2qdvh2dEoCbvJDEdiE9CPYw9mhHa667PBR4kqYkVMc6EGqQPc2f6Bcq3oJiXefzi8ant
      AUTHELIA_SESSION_SECRET: ToXe8mXpCTRYbqNTeYZgjyCwCytQ3XyuUtGyGn2jtQ44xWPKmdVvY5A59eUNxiu2bZrHAcJq82rX8dK3ec8JX4Yy8bvz8gZE8775F7r9hHXP4LqgmxnPWL8AMBAbP26n
      AUTHELIA_STORAGE_ENCRYPTION_KEY: 4M5YJQcP8vofuGl7dmxKTWgGHjdHNNBsQInChD76QdskWK3y49jVJ27i5p0sKwgU5Y23ZPnuGatY3dZF4eHaRD3jJkvEKBn9QTwMgFRG6Ijlodi0NmgPTLOJMJicmJtG
      # AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE: /run/secrets/HMAC_SECRET_FILE
      # AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /run/secrets/JWT_SECRET
      # AUTHELIA_SESSION_SECRET_FILE: /run/secrets/SESSION_SECRET
      # AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/STORAGE_ENCRYPTION_KEY
    volumes:
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/authelia/config
        target: /config
    networks:
      - web
    # secrets:
    #   - HMAC_SECRET_FILE
    #   - JWT_SECRET
    #   - SESSION_SECRET
    #   - STORAGE_ENCRYPTION_KEY
    command:
      - 'authelia'
      - '--config=/config/configuration.yml'
      - '--config=/config/configuration.acl.yml'
      - '--config=/config/configuration.identity_providers.yml'

  redis-authelia:
    image: docker.io/library/redis:alpine
    hostname: redis-authelia
    deploy:
      restart_policy:
        condition: on-failure
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    #   start_period: 20s
    #   interval: 30s
    #   retries: 5
    #   timeout: 3s
    environment:
      TZ: Europe/Paris
    volumes:
      - type: bind
        source: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/traefik/authelia/redis
        target: /data
    networks:
      - web
    command: --save 60 1 --loglevel warning --stop-writes-on-bgsave-error no

# secrets:
#   HMAC_SECRET_FILE:
#     file: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-secret/web/HMAC_SECRET_FILE.txt
#   JWT_SECRET:
#     file: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-secret/web/JWT_SECRET.txt
#   SESSION_SECRET:
#     file: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-secret/web/SESSION_SECRET.txt
#   STORAGE_ENCRYPTION_KEY:
#     file: /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-secret/web/STORAGE_ENCRYPTION_KEY.txt

networks:
  web:
    external: true