services:
  skyblog1:
    restart: unless-stopped
    image: docker.io/nginx:${NGINX_TAG:-alpine}
    container_name: web-skyblog1
    hostname: web-skyblog1
    labels:
      traefik.enable: true
      traefik.http.routers.skyblog1.tls: true
      traefik.http.routers.skyblog1.middlewares: authelia@docker
      traefik.http.routers.skyblog1.entrypoints: websecure
      traefik.http.routers.skyblog1.rule: Host(`${SKYBLOG1}.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.skyblog1.service: skyblog1
      traefik.http.services.skyblog1.loadBalancer.server.port: 80
    volumes:
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/repos/home-docker/timezone:/etc/timezone:ro
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/websites/${SKYBLOG1}.skyrock.com:/usr/share/nginx/html:ro
    environment:
      TZ: Europe/Paris
      NGINX_HOST: ${SKYBLOG1}.${PERSONAL_DOMAINE_NAME}
    expose:
      - 80
    networks:
      - webinternal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  skyblog2:
    restart: unless-stopped
    image: docker.io/nginx:${NGINX_TAG:-alpine}
    container_name: web-skyblog2
    hostname: web-skyblog2
    labels:
      traefik.enable: true
      traefik.http.routers.skyblog2.tls: true
      traefik.http.routers.skyblog2.middlewares: authelia@docker
      traefik.http.routers.skyblog2.entrypoints: websecure
      traefik.http.routers.skyblog2.rule: Host(`${SKYBLOG2}.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.skyblog2.service: skyblog2
      traefik.http.services.skyblog2.loadBalancer.server.port: 80
    volumes:
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/websites/${SKYBLOG2}.skyrock.com:/usr/share/nginx/html:ro
    environment:
      PUID: 1000
      PGID: 100
      TZ: Europe/Paris
      NGINX_HOST: ${SKYBLOG2}.${PERSONAL_DOMAINE_NAME}
    expose:
      - 80
    networks:
      - webinternal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  candle:
    restart: unless-stopped
    image: docker.io/nginx:${NGINX_TAG:-alpine}
    container_name: web-candle
    hostname: web-candle
    labels:
      traefik.enable: true
      traefik.http.routers.candle.tls: true
      traefik.http.routers.candle.middlewares: authelia@docker
      traefik.http.routers.candle.entrypoints: websecure
      traefik.http.routers.candle.rule: Host(`candle.${PERSONAL_DOMAINE_NAME}`) || Host(`brule-un-cierge.${PERSONAL_DOMAINE_NAME}`) || Host(`bruleuncierge.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.candle.service: candle
      traefik.http.services.candle.loadBalancer.server.port: 80
    volumes:
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/websites/candle:/usr/share/nginx/html:ro
    environment:
      TZ: Europe/Paris
      NGINX_HOST: candle.${PERSONAL_DOMAINE_NAME}
    expose:
      - 80
    networks:
      - webinternal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  python-pronostics:
    restart: unless-stopped
    image: python:${PYTHON_TAG:-3.12-alpine3.21}
    container_name: python-pronostics
    hostname: python-pronostics
    labels:
      traefik.enable: true
      traefik.http.routers.python-pronostics-liste.tls: true
      traefik.http.routers.python-pronostics-liste.entrypoints: websecure
      traefik.http.routers.python-pronostics-liste.rule: Host(`pronostic.${PERSONAL_DOMAINE_NAME}`) && PathPrefix(`/liste`)
      traefik.http.routers.python-pronostics-liste.middlewares: authelia@docker
      traefik.http.routers.python-pronostics-liste.service: python-pronostics
      traefik.http.routers.python-pronostics.tls: true
      traefik.http.routers.python-pronostics.entrypoints: websecure
      traefik.http.routers.python-pronostics.rule: Host(`pronostic.${PERSONAL_DOMAINE_NAME}`) && !PathPrefix(`/liste`)
      traefik.http.routers.python-pronostics.middlewares: authelia@docker
      traefik.http.routers.python-pronostics.service: python-pronostics
      traefik.http.services.python-pronostics.loadBalancer.server.port: 5000
    environment:
      TZ: Europe/Paris
    volumes:
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/websites/pronostics:/data
    env_file:
      - stack.env
    command:
      - sh
      - -c
      - > 
        apk add --no-cache sqlite && cd /data &&
        pip install -r /data/requirements.txt && python3 /data/app.py
    networks:
    - webinternal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  python-brainstorm:
    restart: unless-stopped
    image: python:3.12-alpine3.21
    container_name: python-brainstorm
    hostname: python-brainstorm
    labels:
      diun.enable: true
      diun.watch_repos: true
      traefik.enable: true
      traefik.http.routers.python-brainstorm.tls: true
      traefik.http.routers.python-brainstorm.middlewares: authelia@docker
      traefik.http.routers.python-brainstorm.entrypoints: websecure
      traefik.http.routers.python-brainstorm.rule: Host(`brainstorm.${PERSONAL_DOMAINE_NAME}`)
      traefik.http.routers.python-brainstorm.service: python-brainstorm
      traefik.http.services.python-brainstorm.loadBalancer.server.port: 5000
    environment:
      TZ: Europe/Paris
      DATABASE_URL: ${DATABASE_URL}
      DEBUG_MODE: ${DEBUG_MODE}
      SECRET_KEY: ${SECRET_KEY}
      SITE_URL: ${SITE_URL}
    volumes:
      - /${DOCKER_DATA_DIRECTORY:?data path is required}/docker/docker-data/websites/brainstorm:/data
    command:
      - sh
      - -c
      - > 
        cd /data &&
        pip install -r requirements.txt && python3 /data/app.py
    networks:
    - webinternal
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  python-pronostics:
    name: python-pronostics

networks:
  webinternal:
    name: webinternal
